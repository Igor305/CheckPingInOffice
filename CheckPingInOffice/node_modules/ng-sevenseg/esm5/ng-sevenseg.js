import { Component, Input, Injectable, ViewChildren, Renderer2, ElementRef, ViewChild, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

var SevenSegComponent = /** @class */ (function () {
    function SevenSegComponent() {
        this.class = '';
        this._viewInit = false;
        this._value = null;
        this.digits = 1;
        this.decimalPlaces = 0;
    }
    SevenSegComponent.prototype.ngOnInit = function () {
        this.allDigits = [];
        for (var i = 0; i < this.digits; i++) {
            this.allDigits.push(i);
        }
    };
    SevenSegComponent.prototype.ngAfterViewInit = function () {
        this._viewInit = true;
        this.renderAll();
    };
    Object.defineProperty(SevenSegComponent.prototype, "viewBox", {
        get: function () {
            var w = this.digits * 57;
            return "0 0 " + w + " 80";
        },
        enumerable: true,
        configurable: true
    });
    SevenSegComponent.prototype.groupTransform = function (i) {
        var w = i * 57;
        return "translate(" + w + " 0)";
    };
    Object.defineProperty(SevenSegComponent.prototype, "value", {
        set: function (value) {
            var decimalFactor = Math.pow(10, this.decimalPlaces);
            this._value = Math.round(value * decimalFactor) / decimalFactor;
            this.renderAll();
        },
        enumerable: true,
        configurable: true
    });
    SevenSegComponent.prototype.renderAll = function () {
        if (!this._viewInit)
            return;
        if (this._value == null) {
            this.digitComponents.forEach(function (comp) { return comp.digit = null; });
            return;
        }
        var value = Math.round(this._value * Math.pow(10, this.decimalPlaces));
        var digits = this.digits;
        var targetIdx = this.decimalPlaces > 0 ?
            this.digits - this.decimalPlaces - 1 :
            -1;
        var leadingZero = true;
        this.digitComponents.forEach(function (comp, idx) {
            comp.showDecimal = (idx === targetIdx);
            var divisor = Math.pow(10, (digits - idx - 1));
            var curDigit = value / divisor;
            value = value % divisor;
            if (Math.floor(curDigit) > 0)
                leadingZero = false;
            if (value == null || (leadingZero && idx < digits - 1))
                comp.digit = null;
            else if (idx === digits - 1)
                comp.digit = Math.round(curDigit);
            else
                comp.digit = Math.floor(curDigit);
        });
    };
    return SevenSegComponent;
}());
SevenSegComponent.decorators = [
    { type: Injectable },
    { type: Component, args: [{
                selector: 'seven-seg',
                template: "<svg style=\"display: none;\">\n  <defs>\n    <polyline id=\"h-seg\" points=\"11 0, 37 0, 42 5, 37 10, 11 10, 6 5\" />\n    <polyline id=\"v-seg\" points=\"0 11, 5 6, 10 11, 10 34, 5 39, 0 39\" />\n    <circle id=\"dot\" cx=\"52\" cy=\"75\" r=\"5\" />\n    <use id=\"seg0\" href=\"#h-seg\" transform=\"translate(0 0)\"/>\n    <use id=\"seg1\" href=\"#v-seg\" transform=\"translate(48) scale(-1 1)\" />\n    <use id=\"seg2\" href=\"#v-seg\" transform=\"translate(48 80) scale(-1 -1)\" />\n    <use id=\"seg3\" href=\"#h-seg\" transform=\"translate(0 70)\"/>\n    <use id=\"seg4\" href=\"#v-seg\" transform=\"translate(0 80) scale(1 -1)\" />\n    <use id=\"seg5\" href=\"#v-seg\" transform=\"translate(0 0)\" />\n    <use id=\"seg6\" href=\"#h-seg\" transform=\"translate(0 35)\"/>\n  </defs>\n</svg>\n\n<svg [attr.viewBox]=\"viewBox\" focusable=\"false\" display>\n  <g [attr.transform]=\"groupTransform(i)\" *ngFor=\"let i of allDigits\" idx=\"{{i}}\" #digit sevenSegDigit></g>\n</svg>\n",
                styles: ["svg{height:3em;overflow:hidden;stroke-width:0;background-color:#000;fill:red}"]
            },] },
];
SevenSegComponent.ctorParameters = function () { return []; };
SevenSegComponent.propDecorators = {
    "digits": [{ type: Input },],
    "decimalPlaces": [{ type: Input },],
    "class": [{ type: Input },],
    "digitComponents": [{ type: ViewChildren, args: ['digit',] },],
    "value": [{ type: Input },],
};
var segmentsForDigit = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F];
var SevenSegDigitComponent = /** @class */ (function () {
    function SevenSegDigitComponent(renderer) {
        this.renderer = renderer;
        this._showDecimal = false;
        this.allSegments = [];
        for (var i = 0; i < 7; i++) {
            this.allSegments.push(i);
        }
    }
    Object.defineProperty(SevenSegDigitComponent.prototype, "digit", {
        get: function () { return this._digitValue; },
        set: function (val) { this._digitValue = val; this.render(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SevenSegDigitComponent.prototype, "showDecimal", {
        get: function () { return this._showDecimal; },
        set: function (show) { this._showDecimal = show; },
        enumerable: true,
        configurable: true
    });
    SevenSegDigitComponent.prototype.ngAfterViewInit = function () {
        this.render();
    };
    SevenSegDigitComponent.prototype.render = function () {
        var _this = this;
        var segs = segmentsForDigit[this._digitValue];
        this.segments.forEach(function (item, idx) {
            var elt = item.nativeElement;
            if ((segs >> idx) & 1) {
                _this.renderer.setAttribute(elt, 'segmentOn', '');
                _this.renderer.removeAttribute(elt, 'segmentOff');
            }
            else {
                _this.renderer.setAttribute(elt, 'segmentOff', '');
                _this.renderer.removeAttribute(elt, 'segmentOn');
            }
            elt.style.display = 'none';
            elt.style.display = '';
        });
        var ptElt = this.point.nativeElement;
        if (this._showDecimal) {
            this.renderer.setAttribute(ptElt, 'segmentOn', '');
            this.renderer.removeAttribute(ptElt, 'segmentOff');
        }
        else {
            this.renderer.setAttribute(ptElt, 'segmentOff', '');
            this.renderer.removeAttribute(ptElt, 'segmentOn');
        }
        ptElt.style.display = 'none';
        ptElt.style.display = '';
    };
    return SevenSegDigitComponent;
}());
SevenSegDigitComponent.decorators = [
    { type: Component, args: [{
                selector: '[sevenSegDigit]',
                template: "<svg:use *ngFor=\"let j of allSegments\" [attr.href]=\"'#seg'+j\" #seg />\n<svg:use href=\"#dot\" #dot />\n",
                styles: ["[segmentOn]{opacity:1}[segmentOff]{opacity:.2}"]
            },] },
];
SevenSegDigitComponent.ctorParameters = function () { return [
    { type: Renderer2, },
]; };
SevenSegDigitComponent.propDecorators = {
    "segments": [{ type: ViewChildren, args: ['seg', { read: ElementRef },] },],
    "point": [{ type: ViewChild, args: ['dot',] },],
    "idx": [{ type: Input },],
};
var SevenSegModule = /** @class */ (function () {
    function SevenSegModule() {
    }
    return SevenSegModule;
}());
SevenSegModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [SevenSegComponent, SevenSegDigitComponent],
                exports: [SevenSegComponent]
            },] },
];

export { SevenSegModule, SevenSegDigitComponent as ɵb, SevenSegComponent as ɵa };
//# sourceMappingURL=ng-sevenseg.js.map
