import { Component, Input, Injectable, ViewChildren, Renderer2, ElementRef, ViewChild, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SevenSegComponent {
    constructor() {
        this.class = '';
        this._viewInit = false;
        // Set reasonable defaults
        this._value = null;
        this.digits = 1;
        this.decimalPlaces = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.allDigits = [];
        for (let /** @type {?} */ i = 0; i < this.digits; i++) {
            this.allDigits.push(i);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._viewInit = true;
        this.renderAll();
    }
    /**
     * @return {?}
     */
    get viewBox() {
        let /** @type {?} */ w = this.digits * 57;
        return `0 0 ${w} 80`;
    }
    /**
     * @param {?} i
     * @return {?}
     */
    groupTransform(i) {
        let /** @type {?} */ w = i * 57;
        return `translate(${w} 0)`;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        let /** @type {?} */ decimalFactor = Math.pow(10, this.decimalPlaces);
        this._value = Math.round(value * decimalFactor) / decimalFactor;
        // console.log(`set value: ${this._value}`);
        this.renderAll();
    }
    /**
     * @return {?}
     */
    renderAll() {
        if (!this._viewInit)
            return;
        // console.log('render all: ', this._value);
        // Special case: if value attribute is null or not given, blank the display
        if (this._value == null) {
            this.digitComponents.forEach(comp => comp.digit = null);
            return;
        }
        let /** @type {?} */ value = Math.round(this._value * Math.pow(10, this.decimalPlaces)); // shift out decimals from the value
        // Round the result to correct floating point bug with value="4.6" and decimalPlaces="2" rendering as 4.5_ (4.6*100===459.999999...)
        let /** @type {?} */ digits = this.digits; // declared to put in scope of forEach
        // targetIdx is where the decimal place will be shown
        let /** @type {?} */ targetIdx = this.decimalPlaces > 0 ?
            this.digits - this.decimalPlaces - 1 :
            -1;
        let /** @type {?} */ leadingZero = true;
        this.digitComponents.forEach(function (comp, idx) {
            comp.showDecimal = (idx === targetIdx);
            let /** @type {?} */ divisor = Math.pow(10, (digits - idx - 1));
            let /** @type {?} */ curDigit = value / divisor;
            value = value % divisor;
            // console.log('CurDigit:', curDigit, 'next value:', value, 'idx', idx);
            if (Math.floor(curDigit) > 0)
                leadingZero = false;
            if (value == null || (leadingZero && idx < digits - 1))
                comp.digit = null;
            else if (idx === digits - 1)
                comp.digit = Math.round(curDigit);
            else
                comp.digit = Math.floor(curDigit);
        });
    }
}
SevenSegComponent.decorators = [
    { type: Injectable },
    { type: Component, args: [{
                selector: 'seven-seg',
                template: `<svg style="display: none;">
  <defs>
    <polyline id="h-seg" points="11 0, 37 0, 42 5, 37 10, 11 10, 6 5" />
    <polyline id="v-seg" points="0 11, 5 6, 10 11, 10 34, 5 39, 0 39" />
    <circle id="dot" cx="52" cy="75" r="5" />
    <use id="seg0" href="#h-seg" transform="translate(0 0)"/>
    <use id="seg1" href="#v-seg" transform="translate(48) scale(-1 1)" />
    <use id="seg2" href="#v-seg" transform="translate(48 80) scale(-1 -1)" />
    <use id="seg3" href="#h-seg" transform="translate(0 70)"/>
    <use id="seg4" href="#v-seg" transform="translate(0 80) scale(1 -1)" />
    <use id="seg5" href="#v-seg" transform="translate(0 0)" />
    <use id="seg6" href="#h-seg" transform="translate(0 35)"/>
  </defs>
</svg>

<svg [attr.viewBox]="viewBox" focusable="false" display>
  <g [attr.transform]="groupTransform(i)" *ngFor="let i of allDigits" idx="{{i}}" #digit sevenSegDigit></g>
</svg>
`,
                styles: [`svg{height:3em;overflow:hidden;stroke-width:0;background-color:#000;fill:red}`]
            },] },
];
/** @nocollapse */
SevenSegComponent.ctorParameters = () => [];
SevenSegComponent.propDecorators = {
    "digits": [{ type: Input },],
    "decimalPlaces": [{ type: Input },],
    "class": [{ type: Input },],
    "digitComponents": [{ type: ViewChildren, args: ['digit',] },],
    "value": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const segmentsForDigit = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F];
class SevenSegDigitComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this._showDecimal = false;
        this.allSegments = [];
        for (let /** @type {?} */ i = 0; i < 7; i++) {
            this.allSegments.push(i);
        }
    }
    /**
     * @return {?}
     */
    get digit() { return this._digitValue; }
    /**
     * @param {?} val
     * @return {?}
     */
    set digit(val) { this._digitValue = val; this.render(); }
    /**
     * @param {?} show
     * @return {?}
     */
    set showDecimal(show) { this._showDecimal = show; }
    /**
     * @return {?}
     */
    get showDecimal() { return this._showDecimal; }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.render();
    }
    /**
     * @return {?}
     */
    render() {
        let /** @type {?} */ segs = segmentsForDigit[this._digitValue];
        this.segments.forEach((item, idx) => {
            let /** @type {?} */ elt = item.nativeElement;
            if ((segs >> idx) & 1) {
                this.renderer.setAttribute(elt, 'segmentOn', '');
                this.renderer.removeAttribute(elt, 'segmentOff');
            }
            else {
                this.renderer.setAttribute(elt, 'segmentOff', '');
                this.renderer.removeAttribute(elt, 'segmentOn');
            }
            // force redraw in webkit
            elt.style.display = 'none';
            elt.style.display = '';
        });
        let /** @type {?} */ ptElt = this.point.nativeElement;
        if (this._showDecimal) {
            this.renderer.setAttribute(ptElt, 'segmentOn', '');
            this.renderer.removeAttribute(ptElt, 'segmentOff');
        }
        else {
            this.renderer.setAttribute(ptElt, 'segmentOff', '');
            this.renderer.removeAttribute(ptElt, 'segmentOn');
        }
        ptElt.style.display = 'none';
        ptElt.style.display = '';
    }
}
SevenSegDigitComponent.decorators = [
    { type: Component, args: [{
                selector: '[sevenSegDigit]',
                template: `<svg:use *ngFor="let j of allSegments" [attr.href]="'#seg'+j" #seg />
<svg:use href="#dot" #dot />
`,
                styles: [`[segmentOn]{opacity:1}[segmentOff]{opacity:.2}`]
            },] },
];
/** @nocollapse */
SevenSegDigitComponent.ctorParameters = () => [
    { type: Renderer2, },
];
SevenSegDigitComponent.propDecorators = {
    "segments": [{ type: ViewChildren, args: ['seg', { read: ElementRef },] },],
    "point": [{ type: ViewChild, args: ['dot',] },],
    "idx": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SevenSegModule {
}
SevenSegModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [SevenSegComponent, SevenSegDigitComponent],
                exports: [SevenSegComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { SevenSegModule, SevenSegDigitComponent as ɵb, SevenSegComponent as ɵa };
//# sourceMappingURL=ng-sevenseg.js.map
